# 生产环境 Docker Compose 配置示例
#
# 使用说明：
# 1. 在服务器上复制此文件为 docker-compose.prod.yml
# 2. 将 build 配置改为使用预构建的镜像
# 3. 使用命令: docker-compose -f docker-compose.prod.yml up -d
#
# 主要差异：
# - backend/frontend 使用 image 而不是 build
# - 镜像需要提前在本地构建并上传到服务器

version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15
    container_name: uma_audit_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-uma_audit}
      POSTGRES_USER: ${POSTGRES_USER:-uma_audit}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-uma_audit}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - uma_network

  # Redis缓存
  redis:
    image: redis:7
    container_name: uma_audit_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - uma_network

  # 后端API服务 - 使用预构建镜像
  backend:
    image: uma-audit5-backend:latest    # 使用预构建的镜像
    container_name: uma_audit_backend
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; exit(0 if urllib.request.urlopen('http://localhost:8000/health').getcode() == 200 else 1)\""]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - uma_network

  # 前端服务 - 使用预构建镜像
  frontend:
    image: uma-audit5-frontend:latest   # 使用预构建的镜像
    container_name: uma_audit_frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - uma_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  uma_network:
    driver: bridge
